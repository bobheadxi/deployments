name: pipeline

on: [push]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        scenario: [ 'success', 'failure' ]
    # We test failure scenarios, so rely on manual inspection of run
    continue-on-error: true
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-node@v2
      with:
        node-version: '12'
      
    # Dependencies
    # https://docs.github.com/en/actions/guides/caching-dependencies-to-speed-up-workflows#example-using-the-cache-action
    - name: Cache node modules
      uses: actions/cache@v2
      env:
        cache-name: cache-node-modules
      with:
        path: ~/.npm # npm cache files are stored in `~/.npm` on Linux/macOS
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-
          ${{ runner.os }}-build-
          ${{ runner.os }}-
    - run: npm install
    - run: npm run build

    - name: extract branch name
      id: get_branch
      shell: bash
      run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/} | tr / -)"

    - name: start deployment
      uses: ./
      id: deployment
      with:
        step: start
        token: ${{ secrets.GITHUB_TOKEN }}
        env: ${{ steps.get_branch.outputs.branch }}-${{ matrix.scenario }}

    - name: wait
      run: sleep 3s
      shell: bash

    - name: emulate success
      if: ${{ matrix.scenario }} == 'success'
      run: exit 0
      shell: bash
    - name: emulate success
      if: ${{ matrix.scenario }} == 'failure'
      run: exit 1
      shell: bash

    - name: update deployment status
      uses: ./
      if: always()
      with:
        step: finish
        token: ${{ secrets.GITHUB_TOKEN }}
        status: ${{ job.status }}
        deployment_id: ${{ steps.deployment.outputs.deployment_id }}

    - name: wait
      run: sleep 3s
      if: always()
      shell: bash

    - name: mark environment as deactivated
      uses: ./
      if: always()
      with:
        step: deactivate
        token: ${{ secrets.GITHUB_TOKEN }}
        env: ${{ steps.get_branch.outputs.branch }}-${{ matrix.scenario }}
        desc: Deployment was pruned
